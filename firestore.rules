
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to make rules cleaner
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // GAME-SETTINGS: Allow any authenticated user to read, only admins to write
    match /game-settings/{docId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // USERS: Users can read/write their own data. Others can read public data.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId);
    }
    
    // TITLES: Publicly readable, only admin writable
    match /titles/{titleId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // ALLIANCES: Publicly readable, only admin can create/delete, members can interact
    match /alliances/{allianceId} {
      allow read: if isAuth();
      allow create, delete: if isAdmin();
      allow update: if isAuth() && (isAdmin() || (resource.data.leaderId == request.auth.uid));
    }
    
    // VOTES: Users can only vote for their own alliance
    match /votes/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId) && request.resource.data.allianceId == get(/databases/$(database)/documents/users/$(userId)).data.allianceId;
    }
    
    // ACTIVITY LOG: Write-only for authenticated users
    match /activityLog/{logId} {
      allow create: if isAuth();
      allow read, update, delete: if false;
    }
    
    // REPORTS: Users can only read reports they are involved in
    match /reports/{reportId} {
        allow read: if isAuth() && request.auth.uid in resource.data.involvedUsers;
        allow write: if false; // Reports are created by server-side logic (or here, via batch writes in secure contexts)
    }
    
    // QUEUES: Users can only create entries for themselves. No one can read/update/delete directly.
    match /constructionQueue/{jobId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if false;
    }
    
    match /trainingQueue/{jobId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if false;
    }
    
    match /attackQueue/{jobId} {
      allow create: if isAuth() && request.resource.data.attackerId == request.auth.uid;
      allow read, update, delete: if false;
    }
    
    match /returnQueue/{jobId} {
      // Return queue should only be written by a trusted server process, but for client-side logic we lock it down.
      allow read, write: if false;
    }

    match /transportQueue/{jobId} {
        allow create: if isAuth() && request.resource.data.senderId == request.auth.uid;
        allow read, update, delete: if false;
    }
    
    match /wars/{warId} {
        allow read: if isAuth();
        allow create, delete: if isAdmin();
        allow update: if false;
    }
  }
}
