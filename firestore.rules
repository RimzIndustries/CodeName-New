rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    // --- Global Rules ---
    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Collection Rules ---

    // USER DATA: Users can read/write their own data, others can only read.
    match /users/{userId} {
      allow read, write: if isAuth() && request.auth.uid == userId;
      allow read: if isAuth();
    }
    
    // GAME SETTINGS: Publicly readable by any authenticated user for game logic.
    match /game-settings/{docId} {
        allow read: if isAuth();
        // Allow write only for admins in the future.
        // allow write: if isAdmin(); 
    }

    // TITLES, ALLIANCES: Publicly readable data.
    match /titles/{titleId} {
        allow read: if isAuth();
    }
    match /alliances/{allianceId} {
        allow read: if isAuth();
    }
    
    // ACTIVITY LOG, REPORTS: Users can only read their own.
    match /activityLog/{logId} {
      allow read: if isAuth() && resource.data.userId == request.auth.uid;
    }
    match /reports/{reportId} {
        allow read: if isAuth() && request.auth.uid in resource.data.involvedUsers;
    }

    // VOTES: Users can only create/update their own vote.
    match /votes/{userId} {
      allow read, write: if isAuth() && request.auth.uid == userId;
    }
    
    // QUEUES: Users can only create/read their own queue items.
    match /constructionQueue/{jobId} {
        allow read, create: if isAuth() && request.resource.data.userId == request.auth.uid;
    }
    match /trainingQueue/{jobId} {
        allow read, create: if isAuth() && request.resource.data.userId == request.auth.uid;
    }
    match /attackQueue/{jobId} {
        allow read, create: if isAuth() && request.resource.data.attackerId == request.auth.uid;
    }
    match /returnQueue/{jobId} {
        allow read, create: if isAuth() && request.resource.data.userId == request.auth.uid;
    }
    match /transportQueue/{jobId} {
        allow read, create: if isAuth() && (request.resource.data.senderId == request.auth.uid || request.resource.data.recipientId == request.auth.uid);
    }
    
    // WARS: Readable by authenticated users.
    match /wars/{warId} {
        allow read: if isAuth();
    }
  }
}
