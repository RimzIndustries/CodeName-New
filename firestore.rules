rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Default Deny: No collection is accessible unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // USERS: Users can read their own data and update it.
    // Other authenticated users can read public profiles, but not write to them.
    match /users/{userId} {
      allow read: if isAuth();
      allow create, update: if isOwner(userId);
      // Delete is handled by a backend function for security.
      allow delete: if false; 
    }

    // GAME SETTINGS: Authenticated users can read. Only admins can write.
    // This is read by all clients to run the game.
    match /game-settings/{docId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // TITLES: Authenticated users can read. Only admins can write.
    match /titles/{titleId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // ALLIANCES: Authenticated users can read/list.
    // Writes are more complex (create, join, leave, leader actions) and should be handled with care.
    // For now, only admins can create/delete them directly.
    match /alliances/{allianceId} {
      allow read: if isAuth();
      allow write: if isAdmin(); // Admin can create/edit/delete alliances
      // In a real scenario, you'd have more granular rules for members updating descriptions, etc.
    }
    
    // VOTES: Users can only vote for candidates within their own alliance.
    // A user's vote is stored in a document named after their UID.
    match /votes/{userId} {
      allow read: if isAuth();
      // Allow create/update only if the user is the one voting.
      // We also check that the vote being cast corresponds to the user's alliance.
      allow write: if isOwner(userId) && request.resource.data.allianceId == get(/databases/$(database)/documents/users/$(userId)).data.allianceId;
    }
    
    // ACTIVITY LOG: For now, we allow authenticated users to create logs.
    // This could be tightened later.
    match /activityLog/{logId} {
        allow read: if isAuth();
        allow create: if isAuth();
    }
    
    // QUEUES (Construction, Training, Attack, Transport):
    // Users can only create/read/delete their own queue items.
    function isQueueOwner(queueDoc) {
        return isOwner(queueDoc.userId);
    }
    
    match /constructionQueue/{jobId} {
        allow read, delete: if isAuth() && isOwner(get(/databases/$(database)/documents/constructionQueue/$(jobId)).data);
        allow create: if isAuth() && isOwner(request.resource.data);
    }
    
    match /trainingQueue/{jobId} {
        allow read, delete: if isAuth() && isOwner(get(/databases/$(database)/documents/trainingQueue/$(jobId)).data);
        allow create: if isAuth() && isOwner(request.resource.data);
    }
    
    match /attackQueue/{jobId} {
        allow read, delete: if isAuth() && isOwner(get(/databases/$(database)/documents/attackQueue/$(jobId)).data);
        allow create: if isAuth() && isOwner(request.resource.data);
    }
    
     match /transportQueue/{jobId} {
        allow read, delete: if isAuth() && (isOwner(get(/databases/$(database)/documents/transportQueue/$(jobId)).data) || isOwner({ 'userId': get(/databases/$(database)/documents/transportQueue/$(jobId)).data.recipientId }));
        allow create: if isAuth() && isOwner(request.resource.data);
    }

    // REPORTS: Users can only read reports where they are involved.
    match /reports/{reportId} {
      allow read, update: if isAuth() && request.auth.uid in resource.data.involvedUsers;
      allow create: if isAuth(); // Can be created by server-side logic or client after an action
    }
    
    // WARS: Authenticated users can read. Only admins can write for now.
    match /wars/{warId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
  }
}
