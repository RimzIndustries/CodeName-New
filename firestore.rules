rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // users: Pengguna hanya bisa membaca/menulis data mereka sendiri. Admin bisa melakukan apa saja.
    match /users/{userId} {
      allow read, update, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && isOwner(userId);
    }
    
    // game-settings: Siapa saja yang masuk bisa membaca. Hanya admin yang bisa menulis.
    match /game-settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // titles: Siapa saja yang masuk bisa membaca. Hanya admin yang bisa menulis/menghapus.
    match /titles/{docId} {
      allow read: if isSignedIn();
      allow write, delete: if isAdmin();
    }
    
    // alliances: Siapa saja yang masuk bisa membaca. Pemimpin aliansi/admin bisa update. Admin bisa buat/hapus.
    match /alliances/{allianceId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin();
        allow update: if isSignedIn() && (isAdmin() || get(/databases/$(database)/documents/alliances/$(allianceId)).data.leaderId == request.auth.uid);
    }

    // reports & activityLog: Hanya bisa dibuat. Pengguna hanya bisa membaca laporan yang melibatkannya.
    match /reports/{reportId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && request.auth.uid in resource.data.involvedUsers;
    }
    
    match /activityLog/{logId} {
        allow create: if isSignedIn();
        allow read: if false; // Tidak ada yang boleh membaca log aktivitas secara langsung
    }

    // votes: Pengguna hanya bisa membuat/memperbarui suara mereka sendiri.
    match /votes/{userId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && isOwner(userId);
    }

    // Koleksi antrian (Queues): Pengguna hanya bisa membuat dan membaca item mereka sendiri.
    match /constructionQueue/{jobId} {
      allow read, create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    match /trainingQueue/{jobId} {
      allow read, create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    match /attackQueue/{jobId} {
      allow read, create: if isSignedIn() && request.resource.data.attackerId == request.auth.uid;
    }
     match /transportQueue/{jobId} {
      allow read, create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
    }
    match /returnQueue/{jobId} {
      allow read, create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // wars: Siapa saja yang masuk bisa membaca. Admin bisa menghapus. Pemimpin aliansi bisa membuat.
    match /wars/{warId} {
      allow read: if isSignedIn();
      allow delete: if isAdmin();
      allow create: if isSignedIn(); // Logika pemimpin ada di client
    }
  }
}
