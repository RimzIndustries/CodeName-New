rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // game-settings: Allow read for all authenticated users, write only for admins.
    match /game-settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // users: Users can read and write their own data. Admins can read/write any user data.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // titles: Allow read for all authenticated users, write only for admins.
    match /titles/{titleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // alliances: Allow read for all authenticated users. Allow create/update by authenticated users, delete by admin.
    match /alliances/{allianceId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
    }
    
    // votes: Authenticated users can vote (create/update their own vote), admins can delete any.
    match /votes/{userId} {
      allow read, create, update: if request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    // reports and activityLog: Users can only access reports they are involved in.
    match /reports/{reportId} {
      allow read, update: if request.auth.uid in resource.data.involvedUsers;
    }
    
    match /activityLog/{logId} {
       allow read: if request.auth != null;
       allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Queues: Users can create items for themselves, and they are processed and deleted by the server/backend logic.
    match /constructionQueue/{jobId} {
      allow read, create: if request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId;
    }
    
    match /trainingQueue/{jobId} {
       allow read, create: if request.auth.uid == request.resource.data.userId;
       allow delete: if request.auth.uid == resource.data.userId;
    }
    
    match /attackQueue/{jobId} {
       allow read, create: if request.auth.uid == request.resource.data.attackerId;
       allow delete: if request.auth.uid == resource.data.attackerId;
    }
    
    match /returnQueue/{jobId} {
       allow read, create: if request.auth.uid == request.resource.data.userId;
       allow delete: if request.auth.uid == resource.data.userId;
    }
    
    match /transportQueue/{jobId} {
        allow read, create: if request.auth.uid == request.resource.data.senderId;
        allow delete: if request.auth.uid == resource.data.recipientId;
    }

    // wars: Allow read for all authenticated users, write only for admins or involved participants.
    match /wars/{warId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid in request.resource.data.participants;
      allow delete: if isAdmin();
    }
  }
}
