
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // game-settings: Everyone can read, only admin can write.
    match /game-settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // users: Users can read/write their own data. Admin can read/write anyone's data.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
    
    // titles: Everyone can read, only admin can write.
    match /titles/{titleId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // alliances: Everyone can read. Only leaders/admins can write (simplified for now).
    match /alliances/{allianceId} {
        allow read: if request.auth != null;
        allow write: if isAdmin(); // Simplified: allowing only admin to edit for now.
    }
    
    // reports, activityLog: Users can only access their own.
    match /reports/{reportId} {
        allow read, write: if request.auth.uid in resource.data.involvedUsers;
    }
    
    match /activityLog/{logId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // votes: Authenticated users can create/update their own vote.
    match /votes/{userId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Queues (construction, training, attack, transport, return): users can manage their own queue items.
    match /constructionQueue/{jobId} {
        allow read, create: if request.auth.uid == request.resource.data.userId;
        allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    match /trainingQueue/{jobId} {
        allow read, create: if request.auth.uid == request.resource.data.userId;
        allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    match /attackQueue/{jobId} {
        allow read, create: if request.auth.uid == request.resource.data.attackerId;
        allow delete: if request.auth.uid == resource.data.attackerId || isAdmin();
    }
    
    match /transportQueue/{jobId} {
        allow read, create: if request.auth.uid == request.resource.data.senderId;
        allow delete: if request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId || isAdmin();
    }

    match /returnQueue/{jobId} {
        allow read, create: if request.resource.data.userId != null; // System created
        allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    // Wars can be read by anyone, but only created/deleted by admins for now
    match /wars/{warId} {
      allow read: if request.auth != null;
      allow write, delete: if isAdmin();
    }
  }
}
